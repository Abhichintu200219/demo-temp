name: CI/CD Pipeline with BDD + Playwright

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Environment variables for consistent configuration
env:
  NODE_VERSION: '20.19'
  PLAYWRIGHT_BROWSERS_PATH: 0

jobs:
  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type checking
      run: npm run type-check

    - name: Run unit tests with coverage
      run: npm run test:coverage

    # Upload test coverage reports
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: always()
      with:
        files: ./coverage/lcov.info
        fail_ci_if_error: false

  # Build
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    # Cache build artifacts for other jobs
    - name: Cache build output
      uses: actions/cache@v4
      with:
        path: dist
        key: build-${{ github.sha }}

  # BDD E2E Tests with Cucumber + Playwright
  bdd-e2e-tests:
    name: BDD E2E Tests (Cucumber + Playwright)
    runs-on: ubuntu-latest
    needs: unit-tests
    
    strategy:
      matrix:
        # Run tests on different browsers
        browser: [chromium, firefox, webkit]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    # Install Playwright browsers with dependencies
    - name: Install Playwright browsers
      run: npx playwright install --with-deps ${{ matrix.browser }}

    - name: Create required directories
      run: |
        mkdir -p screenshots
        mkdir -p reports
        mkdir -p test-results

    # Restore build artifacts from build job
    - name: Restore build output
      uses: actions/cache@v4
      with:
        path: dist
        key: build-${{ github.sha }}

    - name: Build application if cache miss
      run: |
        if [ ! -d "dist" ]; then
          npm run build
        fi

    # Start the application in background
    - name: Start application
      run: |
        npm run preview &
        echo "Started preview server"
      env:
        CI: true

    # Wait for server to be ready
    - name: Wait for server
      run: |
        npx wait-on http://localhost:4175 --timeout 60000
        echo "Server is ready"

    # Run BDD tests with specific browser
    - name: Run BDD E2E Tests
      run: npm run test:e2e
      env:
        BROWSER: ${{ matrix.browser }}
        HEADLESS: true
        CI: true
        PARALLEL: 1

    # Upload test artifacts on failure
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-artifacts-${{ matrix.browser }}
        path: |
          screenshots/
          reports/
          test-results/
        retention-days: 7

    # Upload BDD reports
    - name: Upload BDD Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bdd-reports-${{ matrix.browser }}
        path: |
          reports/cucumber_report.html
          reports/cucumber_report.json
        retention-days: 30

  # Pure Playwright Tests (if you have any)
  playwright-tests:
    name: Playwright Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Restore build output
      uses: actions/cache@v4
      with:
        path: dist
        key: build-${{ github.sha }}

    - name: Build application if cache miss
      run: |
        if [ ! -d "dist" ]; then
          npm run build
        fi

    - name: Start application
      run: npm run preview &

    - name: Wait for server
      run: npx wait-on http://localhost:4175 --timeout 60000

    # Run pure Playwright tests if they exist
    - name: Run Playwright tests
      run: npm run test:playwright || echo "No Playwright tests found"

    # Upload Playwright reports
    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  # Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, build, bdd-e2e-tests, playwright-tests]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "=== TEST RESULTS SUMMARY ==="
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo "BDD E2E Tests: ${{ needs.bdd-e2e-tests.result }}"
        echo "Playwright Tests: ${{ needs.playwright-tests.result }}"
        
        # Count successful jobs
        declare -i success_count=0
        
        if [[ "${{ needs.unit-tests.result }}" == "success" ]]; then
          success_count+=1
        fi
        
        if [[ "${{ needs.build.result }}" == "success" ]]; then
          success_count+=1
        fi
        
        if [[ "${{ needs.bdd-e2e-tests.result }}" == "success" ]]; then
          success_count+=1
        fi
        
        if [[ "${{ needs.playwright-tests.result }}" == "success" || "${{ needs.playwright-tests.result }}" == "skipped" ]]; then
          success_count+=1
        fi
        
        echo "‚úÖ Successful jobs: $success_count/4"
        
        # Determine overall result
        if [[ "${{ needs.unit-tests.result }}" == "success" && 
              "${{ needs.build.result }}" == "success" && 
              "${{ needs.bdd-e2e-tests.result }}" == "success" ]]; then
          echo "üéâ All critical tests passed!"
          exit 0
        else
          echo "‚ùå Some critical tests failed!"
          exit 1
        fi

  # Deploy (runs only on main branch and all tests pass)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [unit-tests, build, bdd-e2e-tests]
    if: github.ref == 'refs/heads/main' && needs.unit-tests.result == 'success' && needs.build.result == 'success' && needs.bdd-e2e-tests.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Restore build output
      uses: actions/cache@v4
      with:
        path: dist
        key: build-${{ github.sha }}

    - name: Deploy application
      run: |
        echo "üöÄ Deploying to production..."
        # Add your deployment commands here
        # Examples:
        # - Deploy to Vercel: npx vercel --prod
        # - Deploy to Netlify: npx netlify deploy --prod
        # - Deploy to AWS S3: aws s3 sync dist/ s3://your-bucket
        echo "‚úÖ Deployment completed!"