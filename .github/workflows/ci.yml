name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.19'  # Specific version that meets Vite requirements
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type checking
      run: npm run type-check

    - name: Run unit tests with coverage
      run: npm run test:coverage

  # Build
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.19'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

  # E2E Tests with Playwright
  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.19'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Build application for testing
      run: npm run build

    - name: Preview built application
      run: npm run preview &

    - name: Wait for server to be ready
      run: npx wait-on http://localhost:4173

    - name: Run Playwright tests
      run: npm run e2e

  # Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, build, e2e-tests]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "=== TEST RESULTS SUMMARY ==="
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo "E2E Tests: ${{ needs.e2e-tests.result }}"
        
        if [[ "${{ needs.unit-tests.result }}" == "success" && "${{ needs.build.result }}" == "success" && "${{ needs.e2e-tests.result }}" == "success" ]]; then
          echo "✅ All tests passed!"
          exit 0
        else
          echo "❌ Some tests failed!"
          exit 1
        fi